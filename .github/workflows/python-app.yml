name: Python Application CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black pytest bandit
        
    - name: Check code formatting with Black
      run: |
        black --check app/ tests/ run.py
        
    - name: Lint with flake8
      run: |
        flake8 app/ tests/ --count --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-results-${{ matrix.python-version }}.json || true
        
    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-results-py${{ matrix.python-version }}
        path: bandit-results-${{ matrix.python-version }}.json

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask coverage
        
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --junitxml=test-results-${{ matrix.python-version }}.xml
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          test-results-${{ matrix.python-version }}.xml
          coverage.xml
        retention-days: 30
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html-py${{ matrix.python-version }}
        path: htmlcov/
        retention-days: 30

  database-test:
    name: Database Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest
        
    - name: Run database tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      run: |
        python -m pytest tests/ -v -k "test_db" --tb=short
        
  dependency-check:
    name: Dependency Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install safety
      run: |
        pip install safety
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload safety report
      uses: actions/upload-artifact@v4
      with:
        name: safety-report
        path: safety-report.json

  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [code-quality, test, dependency-check]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "### Code Quality Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Black Formatting**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Flake8 Linting**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "### Security Results" >> $GITHUB_STEP_SUMMARY
        echo "- **Dependency Check**: ${{ needs.dependency-check.result }}" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.code-quality.result }}" == "success" ] && [ "${{ needs.test.result }}" == "success" ]; then
          echo "🎉 All checks passed! Ready for deployment." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some checks failed. Please review the logs." >> $GITHUB_STEP_SUMMARY
        fi
